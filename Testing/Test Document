The purpose of Testing in our game is to ensure that:
  1. each block is in proper place in the array or in the box
  2. each block does not collide with another block 
  3. all methods work properly such as collision detection, rotation, and movements
  
  
  
How to Test Game against the junit
  - Open the command prompt
  - change the directory to testing
  - compile all the files by using the command javac -cp .;junit-4.12.jar;hamcrest-core-1.3.jar *.java
  - Run the test using the command  java -cp .:junit-4.12.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore BoardTest
 
 
 
 
 The test that we used in our junit test
  1) testInitialPosition
   - this checks if a block is in perfectly in the middle as soon as it respawns
   - What we do in the test is we check if each block is in the correct index in the array(board)
   
   2)testMoveDown
   -  this checks the method moveDown() if it correctly moves the block down by one row
   - what we do in the test is, we call the method moveDown() and check if the indexes of the block moves
      down by one row(or the y coordinates decreased by 1)
   
   3)testMoveLeft()
   - this checks the method moveLeft() if it correctly moves the block to the left by one column
   - what we do in this test is, we call the methd moveLeft() and check if the indexes of the block moves 
      left by one column(or the x coordinates decreased by 1)
      
   4)testMoveRight()
   - this checks the method moveRight() if it correctly moves the block to the right by one colum
   - what we do in this is, we call the method moveRight() and check if the indexes of the block moves right
      by one column( or the x coordinates increased by one)
      
   5)testLeftCollision()
   - this checks the method leftCollision(),which is a boolean
   - if leftCollision() is true, the indexes of the block should not change because there is a block on its left
   - what we do here is, we call the method leftcollision() , and we test if the indexes of the block will change. In order
    to pass this test, the indexes should remain unchanged.
    
    6)testRightCollsion()
    - this checks the method rightCollision(), which is a boolean
    - it is expected that the indexes of the block will not change because there is a block on its right
    - what we do in here is, we call the method rightCollision(), and we test if the indexes of the block will change. In order
      to pass this test, the indexes should remain unchanged.
      
     7)testBottomCollision()
     - this checks the method bottomCollision(), which is a boolean 
     - if bottomCollision is true, the indexes of the block should not change because there is a block below it
     - in order to pass this test, the indexes of the block should remain unchanged when the boolean is true
     
     8) testRotateRight()
     - this checks if the method rotateRight() works perfectly
     - the indexes of the block should be in the right place when the method rotateRight() is called
     
     9) test RotateLeft()
     - this checks if the method rotateLeft() works perfectly
     - the indexes of the block should be in the right place when the method rotateLeft() is called
     
     10) testClearRow()
     - this checks if the method checkFullRow clears a row filled with blocks
     - when a row if completely filled with blocks, that row should clear so that the blocks above it will move down by how rows have been cleared
      
      
      
      
  
 
   
   
